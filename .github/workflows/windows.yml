name: Windows
on: 
  push:
    paths:
      - 'src/**'
      - '.github/workflows/windows.yml'
  pull_request:
    paths:
      - 'src/**'
      - '.github/workflows/windows.yml' 
jobs:
  build:
    name: Build
    # windows-latest is windows server 2019 
    # doc: https://github.com/actions/virtual-environments/blob/main/images/win/Windows2019-Readme.md
    runs-on: windows-2019
    strategy:
      # matrix config
      matrix:
        qt-ver: [5.15.2]
        qt-arch: [win64_msvc2019_64, win32_msvc2019]
        include:
          - qt-arch: win64_msvc2019_64
            msvc-arch: x64
            qt-arch-install: msvc2019_64
            openssl-arch: VC-WIN64A
            openssl-suffix: -x64
          - qt-arch: win32_msvc2019
            msvc-arch: x86
            qt-arch-install: msvc2019
            openssl-arch: VC-WIN32
            openssl-suffix: ""
    env:
      target-name: QtElu.exe
      package-target-name: QtElu
      qt-install-path: ${{ github.workspace }}/${{ matrix.qt-ver }}
      platform-des: win
      openssl-version: 1.1.1w
    steps:
      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v4
        with:
          path: ${{ env.qt-install-path }}/${{ matrix.qt-arch-install }}
          key: ${{ runner.os }}/${{ matrix.qt-ver }}/${{ matrix.qt-arch }}
        # install strawberryperl nasm
      - name: Install OpenSSL dependencies
        shell: pwsh
        run: |
          choco install -y strawberryperl nasm --no-progress

      - name: Download and compile OpenSSL
        shell: cmd
        run: |
          curl -L https://github.com/openssl/openssl/releases/download/OpenSSL_1_1_1w/openssl-%OPENSSL_VERSION%.tar.gz -o openssl.tar.gz
          7z x openssl.tar.gz
          7z x openssl.tar

          cd openssl-%OPENSSL_VERSION%
          perl Configure %OPENSSL_ARCH% no-asm --prefix="%CD%\dist"
          nmake
          nmake install
        env:
          OPENSSL_VERSION: ${{ env.openssl-version }}
          OPENSSL_ARCH: ${{ matrix.openssl-arch }}
          OPENSSL_SUFFIX: ${{ matrix.openssl-suffix }}

      - name: Install Qt
        uses: jurplel/install-qt-action@v4.1.1
        with:
          # Version of Qt to install
          version: ${{ matrix.qt-ver }}
          # Target platform for build
          target: desktop
          # Architecture for Windows
          arch: ${{ matrix.qt-arch }}
          cached: ${{ steps.cache-qt.outputs.cache-hit }}
      # pull code
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      # cmake
      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '3.25.0'
      # msvc build
      - name: msvc-build
        id: build
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" ${{ matrix.msvc-arch }}
          cmake -S . -B build -G "NMake Makefiles" -DCMAKE_PREFIX_PATH="${{ env.qt-install-path }}/${{ matrix.qt-arch-install }}" -DCMAKE_BUILD_TYPE=Release
          cmake --build build --config Release
          echo winSdkDir=%WindowsSdkDir% >> %GITHUB_ENV%
          echo winSdkVer=%WindowsSdkVersion% >> %GITHUB_ENV%
          echo vcToolsInstallDir=%VCToolsInstallDir% >> %GITHUB_ENV%
          echo vcToolsRedistDir=%VCToolsRedistDir% >> %GITHUB_ENV%
      # get ref
      - name: Get the version
        shell: bash
        id: get-version
        # ${ GITHUB_REF/refs\/tags\// }
        run: echo ::set-output name=version::${GITHUB_REF##*/}
      # package
      - name: package
        id: package      
        env:
          archiveName: ${{env.package-target-name}}-${{ env.platform-des }}-${{ matrix.msvc-arch }}-${{ steps.get-version.outputs.version }}       
        shell: pwsh
        run: |
          $opensslPath = "openssl-$env:openssl-version/dist/bin"
          Copy-Item "$opensslPath/libcrypto-1_1$($env:OPENSSL_SUFFIX).dll" -Destination "${env:archiveName}/"
          Copy-Item "$opensslPath/libssl-1_1$($env:OPENSSL_SUFFIX).dll" -Destination "${env:archiveName}/"

          & scripts\windows-publish.ps1 ${env:archiveName} ${env:target-name}
          # echo packageName to next step
           $name = ${env:archiveName}
           echo "::set-output name=packageName::$name"       
      # tag search github-Release
      # upload artifacts          
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.package.outputs.packageName }}
          path: ${{ steps.package.outputs.packageName }}
      # tag upload Release
      - name: uploadRelease
        if: startsWith(github.event.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ steps.package.outputs.packageName }}.zip
          asset_name: ${{ steps.package.outputs.packageName }}.zip
          tag: ${{ github.ref }}
          overwrite: true 